package com.example.webservice.message;

import javax.xml.namespace.QName;
import javax.xml.ws.Service;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import java.net.URL;

/**
 * This class was generated by Apache CXF 3.4.2
 * 2021-03-04T14:52:21.629+08:00
 * Generated source version: 3.4.2
 *
 */
@WebServiceClient(name = "MessageService",
                  wsdlLocation = "classpath:wsdl/MessageService.xml",
                  targetNamespace = "http://tempuri.org/")
public class MessageService extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://tempuri.org/", "MessageService");
    public final static QName MessageServiceHttpPost = new QName("http://tempuri.org/", "MessageServiceHttpPost");
    public final static QName MessageServiceHttpGet = new QName("http://tempuri.org/", "MessageServiceHttpGet");
    public final static QName MessageServiceSoap = new QName("http://tempuri.org/", "MessageServiceSoap");
    public final static QName MessageServiceSoap12 = new QName("http://tempuri.org/", "MessageServiceSoap12");
    static {
        URL url = MessageService.class.getClassLoader().getResource("wsdl/MessageService.xml");
        if (url == null) {
            java.util.logging.Logger.getLogger(MessageService.class.getName())
                .log(java.util.logging.Level.INFO,
                     "Can not initialize the default wsdl from {0}", "classpath:wsdl/MessageService.xml");
        }
        WSDL_LOCATION = url;
    }

    public MessageService(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public MessageService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public MessageService() {
        super(WSDL_LOCATION, SERVICE);
    }

    public MessageService(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    public MessageService(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    public MessageService(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }




    /**
     *
     * @return
     *     returns MessageServiceHttpPost
     */
    @WebEndpoint(name = "MessageServiceHttpPost")
    public MessageServiceHttpPost getMessageServiceHttpPost() {
        return super.getPort(MessageServiceHttpPost, MessageServiceHttpPost.class);
    }

    /**
     *
     * @param features
     *     A list of {@link WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns MessageServiceHttpPost
     */
    @WebEndpoint(name = "MessageServiceHttpPost")
    public MessageServiceHttpPost getMessageServiceHttpPost(WebServiceFeature... features) {
        return super.getPort(MessageServiceHttpPost, MessageServiceHttpPost.class, features);
    }


    /**
     *
     * @return
     *     returns MessageServiceHttpGet
     */
    @WebEndpoint(name = "MessageServiceHttpGet")
    public MessageServiceHttpGet getMessageServiceHttpGet() {
        return super.getPort(MessageServiceHttpGet, MessageServiceHttpGet.class);
    }

    /**
     *
     * @param features
     *     A list of {@link WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns MessageServiceHttpGet
     */
    @WebEndpoint(name = "MessageServiceHttpGet")
    public MessageServiceHttpGet getMessageServiceHttpGet(WebServiceFeature... features) {
        return super.getPort(MessageServiceHttpGet, MessageServiceHttpGet.class, features);
    }


    /**
     *
     * @return
     *     returns MessageServiceSoap
     */
    @WebEndpoint(name = "MessageServiceSoap")
    public MessageServiceSoap getMessageServiceSoap() {
        return super.getPort(MessageServiceSoap, MessageServiceSoap.class);
    }

    /**
     *
     * @param features
     *     A list of {@link WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns MessageServiceSoap
     */
    @WebEndpoint(name = "MessageServiceSoap")
    public MessageServiceSoap getMessageServiceSoap(WebServiceFeature... features) {
        return super.getPort(MessageServiceSoap, MessageServiceSoap.class, features);
    }


    /**
     *
     * @return
     *     returns MessageServiceSoap
     */
    @WebEndpoint(name = "MessageServiceSoap12")
    public MessageServiceSoap getMessageServiceSoap12() {
        return super.getPort(MessageServiceSoap12, MessageServiceSoap.class);
    }

    /**
     *
     * @param features
     *     A list of {@link WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns MessageServiceSoap
     */
    @WebEndpoint(name = "MessageServiceSoap12")
    public MessageServiceSoap getMessageServiceSoap12(WebServiceFeature... features) {
        return super.getPort(MessageServiceSoap12, MessageServiceSoap.class, features);
    }

}
