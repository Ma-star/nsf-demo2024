package com.example.webservice.project;

import javax.xml.namespace.QName;
import javax.xml.ws.Service;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import java.net.URL;

/**
 * This class was generated by Apache CXF 3.4.2
 * 2021-03-04T14:52:39.949+08:00
 * Generated source version: 3.4.2
 *
 */
@WebServiceClient(name = "ProjectInfo",
                  wsdlLocation = "classpath:wsdl/ProjectInfo.xml",
                  targetNamespace = "http://tempuri.org/")
public class ProjectInfo extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://tempuri.org/", "ProjectInfo");
    public final static QName ProjectInfoHttpGet = new QName("http://tempuri.org/", "ProjectInfoHttpGet");
    public final static QName ProjectInfoHttpPost = new QName("http://tempuri.org/", "ProjectInfoHttpPost");
    public final static QName ProjectInfoSoap12 = new QName("http://tempuri.org/", "ProjectInfoSoap12");
    public final static QName ProjectInfoSoap = new QName("http://tempuri.org/", "ProjectInfoSoap");
    static {
        URL url = ProjectInfo.class.getClassLoader().getResource("wsdl/ProjectInfo.xml");
        if (url == null) {
            java.util.logging.Logger.getLogger(ProjectInfo.class.getName())
                .log(java.util.logging.Level.INFO,
                     "Can not initialize the default wsdl from {0}", "classpath:wsdl/ProjectInfo.xml");
        }
        WSDL_LOCATION = url;
    }

    public ProjectInfo(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public ProjectInfo(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public ProjectInfo() {
        super(WSDL_LOCATION, SERVICE);
    }

    public ProjectInfo(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    public ProjectInfo(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    public ProjectInfo(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }




    /**
     *
     * @return
     *     returns ProjectInfoHttpGet
     */
    @WebEndpoint(name = "ProjectInfoHttpGet")
    public ProjectInfoHttpGet getProjectInfoHttpGet() {
        return super.getPort(ProjectInfoHttpGet, ProjectInfoHttpGet.class);
    }

    /**
     *
     * @param features
     *     A list of {@link WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns ProjectInfoHttpGet
     */
    @WebEndpoint(name = "ProjectInfoHttpGet")
    public ProjectInfoHttpGet getProjectInfoHttpGet(WebServiceFeature... features) {
        return super.getPort(ProjectInfoHttpGet, ProjectInfoHttpGet.class, features);
    }


    /**
     *
     * @return
     *     returns ProjectInfoHttpPost
     */
    @WebEndpoint(name = "ProjectInfoHttpPost")
    public ProjectInfoHttpPost getProjectInfoHttpPost() {
        return super.getPort(ProjectInfoHttpPost, ProjectInfoHttpPost.class);
    }

    /**
     *
     * @param features
     *     A list of {@link WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns ProjectInfoHttpPost
     */
    @WebEndpoint(name = "ProjectInfoHttpPost")
    public ProjectInfoHttpPost getProjectInfoHttpPost(WebServiceFeature... features) {
        return super.getPort(ProjectInfoHttpPost, ProjectInfoHttpPost.class, features);
    }


    /**
     *
     * @return
     *     returns ProjectInfoSoap
     */
    @WebEndpoint(name = "ProjectInfoSoap12")
    public ProjectInfoSoap getProjectInfoSoap12() {
        return super.getPort(ProjectInfoSoap12, ProjectInfoSoap.class);
    }

    /**
     *
     * @param features
     *     A list of {@link WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns ProjectInfoSoap
     */
    @WebEndpoint(name = "ProjectInfoSoap12")
    public ProjectInfoSoap getProjectInfoSoap12(WebServiceFeature... features) {
        return super.getPort(ProjectInfoSoap12, ProjectInfoSoap.class, features);
    }


    /**
     *
     * @return
     *     returns ProjectInfoSoap
     */
    @WebEndpoint(name = "ProjectInfoSoap")
    public ProjectInfoSoap getProjectInfoSoap() {
        return super.getPort(ProjectInfoSoap, ProjectInfoSoap.class);
    }

    /**
     *
     * @param features
     *     A list of {@link WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns ProjectInfoSoap
     */
    @WebEndpoint(name = "ProjectInfoSoap")
    public ProjectInfoSoap getProjectInfoSoap(WebServiceFeature... features) {
        return super.getPort(ProjectInfoSoap, ProjectInfoSoap.class, features);
    }

}
